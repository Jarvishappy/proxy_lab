2015-7-2
Milestone
1. 先实现一个最最简单的echo client, echo serve，不带error handling
2. 逐步增强功能，实现最简单的的proxy
3. 改造成多线程版本

2015-7-4
实现了最简单的echo client, echo server。
1. 读socket的时候，read()返回0代表什么？
答：表示peer socket关闭了(EOF, no more data to be read)。如果是server检测到
这个事件，那么server就应该把clientfd给关闭。server可以继续往这个clientfd写入数据，
不会报错。

2. write()一个closed socket，会报什么错?
答：write() return -1 and set errno to EBADF. proxy lab的handout pdf中说的是EPIPE

3. read()一个closed socket会报什么错？
答：read() return -1 and set errno to EBADF. proxy lab的handout pdf中说的是ECONNRESET


2015-7-5
实现了proxy的核心功能: proxy。
代码结构很混乱，有很多重复的代码(读取request和response的header，body的代码可以提取
成一个function)。
考虑能否用select()消除重复代码，让代码变得更加简洁。

proxy lab的part1完成的差不多了。proxy的功能已经实现，代码也整理了一下，变得比较简洁了。但是使用telnet测试GET
http://www.taobao.com/ HTTP/1.1时报了segmentation fault。


2015-7-11
有多个bug导致了segmentation fault：
1. parse_request_line()的delim=strchr(io_buf->linebuf, ' ');
这一句，strchr()没有找到' '，返回NULL，然后下面没有判断delim是否不为NULL，直接*delim='\0'了

2. 然后，根本的原因竟然是在send_body()里，send_body需要从target server的响应中读出body，
然后再写回给浏览器，读的时候我是一次性读content_len个字节的，但是很明显，content_len有时
候会比MAXBUF大，所以这里也发生了segment fault，需要用一个循环每次至多读取MAXBUF个字节到Buffer
中，然后用rio_readnb的返回值作为rio_writen的最后一个参数。


现在是没有segmentation fault了，但是经常会blocked在rio_read():590的read()上啊
解决办法：
1. 把socket搞成non-blocking的，这样子read()读不到数据的时候就不会一直blcoked住了！
2. 不使用buffered的IO，只用unbuffered的read()


2015-7-12
1. 多线程环境下，如何保证每个thread有private的errno，不修改别的thread的errno？
答：errno在Linux下是thread-safe的，POSIX标准也规定了errno必须是thread-specific的。

1. Thread per connection
每次accept到一个connection，就创建一个thread，把fd丢给thread

2. Thread per request


先实现最简单的thread per connection

2015-7-18
今天outing，没有网络，测试好麻烦。在ubuntu里开了个python web server，用telnet测了一下，
接收到新的连接之后可以成功的创建worker thread。





